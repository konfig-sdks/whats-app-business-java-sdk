/*
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Contact;
import com.konfigthis.client.model.Hsm;
import com.konfigthis.client.model.Location;
import com.konfigthis.client.model.MessageType;
import com.konfigthis.client.model.Text;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * SendMessageRequestBody
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SendMessageRequestBody {
  public static final String SERIALIZED_NAME_AUDIO = "audio";
  @SerializedName(SERIALIZED_NAME_AUDIO)
  private Object audio = null;

  public static final String SERIALIZED_NAME_CONTACTS = "contacts";
  @SerializedName(SERIALIZED_NAME_CONTACTS)
  private List<Contact> contacts = null;

  public static final String SERIALIZED_NAME_DOCUMENT = "document";
  @SerializedName(SERIALIZED_NAME_DOCUMENT)
  private Object document = null;

  public static final String SERIALIZED_NAME_HSM = "hsm";
  @SerializedName(SERIALIZED_NAME_HSM)
  private Hsm hsm;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private Object image = null;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private Location location;

  public static final String SERIALIZED_NAME_PREVIEW_URL = "preview_url";
  @SerializedName(SERIALIZED_NAME_PREVIEW_URL)
  private Boolean previewUrl;

  /**
   * Determines whether the recipient is an individual or a group Specifying recipient_type in the request is optional when the value is individual. However, recipient_type is required when using group. If sending a text message to a group, see the Sending Group Messages documentation.
   */
  @JsonAdapter(RecipientTypeEnum.Adapter.class)
 public enum RecipientTypeEnum {
    INDIVIDUAL("individual"),
    
    GROUP("group");

    private String value;

    RecipientTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RecipientTypeEnum fromValue(String value) {
      for (RecipientTypeEnum b : RecipientTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RecipientTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RecipientTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RecipientTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RecipientTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RECIPIENT_TYPE = "recipient_type";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_TYPE)
  private RecipientTypeEnum recipientType = RecipientTypeEnum.INDIVIDUAL;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private Text text;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to;

  public static final String SERIALIZED_NAME_TTL = "ttl";
  @SerializedName(SERIALIZED_NAME_TTL)
  private Object ttl;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private MessageType type = MessageType.TEXT;

  public static final String SERIALIZED_NAME_VIDEO = "video";
  @SerializedName(SERIALIZED_NAME_VIDEO)
  private Object video = null;

  public SendMessageRequestBody() {
  }

  public SendMessageRequestBody audio(Object audio) {
    
    
    
    
    this.audio = audio;
    return this;
  }

   /**
   * Get audio
   * @return audio
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getAudio() {
    return audio;
  }


  public void setAudio(Object audio) {
    
    
    
    this.audio = audio;
  }


  public SendMessageRequestBody contacts(List<Contact> contacts) {
    
    
    
    
    this.contacts = contacts;
    return this;
  }

  public SendMessageRequestBody addContactsItem(Contact contactsItem) {
    if (this.contacts == null) {
      this.contacts = new ArrayList<>();
    }
    this.contacts.add(contactsItem);
    return this;
  }

   /**
   * 
   * @return contacts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Contact> getContacts() {
    return contacts;
  }


  public void setContacts(List<Contact> contacts) {
    
    
    
    this.contacts = contacts;
  }


  public SendMessageRequestBody document(Object document) {
    
    
    
    
    this.document = document;
    return this;
  }

   /**
   * Get document
   * @return document
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getDocument() {
    return document;
  }


  public void setDocument(Object document) {
    
    
    
    this.document = document;
  }


  public SendMessageRequestBody hsm(Hsm hsm) {
    
    
    
    
    this.hsm = hsm;
    return this;
  }

   /**
   * Get hsm
   * @return hsm
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Hsm getHsm() {
    return hsm;
  }


  public void setHsm(Hsm hsm) {
    
    
    
    this.hsm = hsm;
  }


  public SendMessageRequestBody image(Object image) {
    
    
    
    
    this.image = image;
    return this;
  }

   /**
   * Get image
   * @return image
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getImage() {
    return image;
  }


  public void setImage(Object image) {
    
    
    
    this.image = image;
  }


  public SendMessageRequestBody location(Location location) {
    
    
    
    
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Location getLocation() {
    return location;
  }


  public void setLocation(Location location) {
    
    
    
    this.location = location;
  }


  public SendMessageRequestBody previewUrl(Boolean previewUrl) {
    
    
    
    
    this.previewUrl = previewUrl;
    return this;
  }

   /**
   * Specifying preview_url in the request is optional when not including a URL in your message. To include a URL preview, set preview_url to true in the message body and make sure the URL begins with http:// or https://. For more information, see the Sending URLs in Text Messages section.
   * @return previewUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Specifying preview_url in the request is optional when not including a URL in your message. To include a URL preview, set preview_url to true in the message body and make sure the URL begins with http:// or https://. For more information, see the Sending URLs in Text Messages section.")

  public Boolean getPreviewUrl() {
    return previewUrl;
  }


  public void setPreviewUrl(Boolean previewUrl) {
    
    
    
    this.previewUrl = previewUrl;
  }


  public SendMessageRequestBody recipientType(RecipientTypeEnum recipientType) {
    
    
    
    
    this.recipientType = recipientType;
    return this;
  }

   /**
   * Determines whether the recipient is an individual or a group Specifying recipient_type in the request is optional when the value is individual. However, recipient_type is required when using group. If sending a text message to a group, see the Sending Group Messages documentation.
   * @return recipientType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "INDIVIDUAL", value = "Determines whether the recipient is an individual or a group Specifying recipient_type in the request is optional when the value is individual. However, recipient_type is required when using group. If sending a text message to a group, see the Sending Group Messages documentation.")

  public RecipientTypeEnum getRecipientType() {
    return recipientType;
  }


  public void setRecipientType(RecipientTypeEnum recipientType) {
    
    
    
    this.recipientType = recipientType;
  }


  public SendMessageRequestBody text(Text text) {
    
    
    
    
    this.text = text;
    return this;
  }

   /**
   * Get text
   * @return text
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Text getText() {
    return text;
  }


  public void setText(Text text) {
    
    
    
    this.text = text;
  }


  public SendMessageRequestBody to(String to) {
    
    
    
    
    this.to = to;
    return this;
  }

   /**
   * When recipient_type is individual, this field is the WhatsApp ID (phone number) returned from contacts endpoint. When recipient_type is group, this field is the WhatsApp group ID.
   * @return to
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "{whatsapp-id}", required = true, value = "When recipient_type is individual, this field is the WhatsApp ID (phone number) returned from contacts endpoint. When recipient_type is group, this field is the WhatsApp group ID.")

  public String getTo() {
    return to;
  }


  public void setTo(String to) {
    
    
    
    this.to = to;
  }


  public SendMessageRequestBody ttl(Object ttl) {
    
    
    
    
    this.ttl = ttl;
    return this;
  }

   /**
   * Get ttl
   * @return ttl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getTtl() {
    return ttl;
  }


  public void setTtl(Object ttl) {
    
    
    
    this.ttl = ttl;
  }


  public SendMessageRequestBody type(MessageType type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MessageType getType() {
    return type;
  }


  public void setType(MessageType type) {
    
    
    
    this.type = type;
  }


  public SendMessageRequestBody video(Object video) {
    
    
    
    
    this.video = video;
    return this;
  }

   /**
   * Get video
   * @return video
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getVideo() {
    return video;
  }


  public void setVideo(Object video) {
    
    
    
    this.video = video;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SendMessageRequestBody instance itself
   */
  public SendMessageRequestBody putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendMessageRequestBody sendMessageRequestBody = (SendMessageRequestBody) o;
    return Objects.equals(this.audio, sendMessageRequestBody.audio) &&
        Objects.equals(this.contacts, sendMessageRequestBody.contacts) &&
        Objects.equals(this.document, sendMessageRequestBody.document) &&
        Objects.equals(this.hsm, sendMessageRequestBody.hsm) &&
        Objects.equals(this.image, sendMessageRequestBody.image) &&
        Objects.equals(this.location, sendMessageRequestBody.location) &&
        Objects.equals(this.previewUrl, sendMessageRequestBody.previewUrl) &&
        Objects.equals(this.recipientType, sendMessageRequestBody.recipientType) &&
        Objects.equals(this.text, sendMessageRequestBody.text) &&
        Objects.equals(this.to, sendMessageRequestBody.to) &&
        Objects.equals(this.ttl, sendMessageRequestBody.ttl) &&
        Objects.equals(this.type, sendMessageRequestBody.type) &&
        Objects.equals(this.video, sendMessageRequestBody.video)&&
        Objects.equals(this.additionalProperties, sendMessageRequestBody.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(audio, contacts, document, hsm, image, location, previewUrl, recipientType, text, to, ttl, type, video, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendMessageRequestBody {\n");
    sb.append("    audio: ").append(toIndentedString(audio)).append("\n");
    sb.append("    contacts: ").append(toIndentedString(contacts)).append("\n");
    sb.append("    document: ").append(toIndentedString(document)).append("\n");
    sb.append("    hsm: ").append(toIndentedString(hsm)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    previewUrl: ").append(toIndentedString(previewUrl)).append("\n");
    sb.append("    recipientType: ").append(toIndentedString(recipientType)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    video: ").append(toIndentedString(video)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("audio");
    openapiFields.add("contacts");
    openapiFields.add("document");
    openapiFields.add("hsm");
    openapiFields.add("image");
    openapiFields.add("location");
    openapiFields.add("preview_url");
    openapiFields.add("recipient_type");
    openapiFields.add("text");
    openapiFields.add("to");
    openapiFields.add("ttl");
    openapiFields.add("type");
    openapiFields.add("video");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("to");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SendMessageRequestBody
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SendMessageRequestBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SendMessageRequestBody is not found in the empty JSON string", SendMessageRequestBody.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SendMessageRequestBody.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("contacts") != null && !jsonObj.get("contacts").isJsonNull()) {
        JsonArray jsonArraycontacts = jsonObj.getAsJsonArray("contacts");
        if (jsonArraycontacts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("contacts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `contacts` to be an array in the JSON string but got `%s`", jsonObj.get("contacts").toString()));
          }

          // validate the optional field `contacts` (array)
          for (int i = 0; i < jsonArraycontacts.size(); i++) {
            Contact.validateJsonObject(jsonArraycontacts.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `hsm`
      if (jsonObj.get("hsm") != null && !jsonObj.get("hsm").isJsonNull()) {
        Hsm.validateJsonObject(jsonObj.getAsJsonObject("hsm"));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        Location.validateJsonObject(jsonObj.getAsJsonObject("location"));
      }
      if ((jsonObj.get("recipient_type") != null && !jsonObj.get("recipient_type").isJsonNull()) && !jsonObj.get("recipient_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient_type").toString()));
      }
      // validate the optional field `text`
      if (jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) {
        Text.validateJsonObject(jsonObj.getAsJsonObject("text"));
      }
      if (!jsonObj.get("to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SendMessageRequestBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SendMessageRequestBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SendMessageRequestBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SendMessageRequestBody.class));

       return (TypeAdapter<T>) new TypeAdapter<SendMessageRequestBody>() {
           @Override
           public void write(JsonWriter out, SendMessageRequestBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SendMessageRequestBody read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SendMessageRequestBody instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SendMessageRequestBody given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SendMessageRequestBody
  * @throws IOException if the JSON string is invalid with respect to SendMessageRequestBody
  */
  public static SendMessageRequestBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SendMessageRequestBody.class);
  }

 /**
  * Convert an instance of SendMessageRequestBody to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

