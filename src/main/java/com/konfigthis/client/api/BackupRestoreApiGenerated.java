/*
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BackupSettingsRequestBody;
import com.konfigthis.client.model.BackupSettingsResponse;
import com.konfigthis.client.model.RestoreSettingsRequestBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BackupRestoreApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BackupRestoreApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public BackupRestoreApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call settingsPostCall(BackupSettingsRequestBody backupSettingsRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = backupSettingsRequestBody;

        // create path and map variables
        String localVarPath = "/settings/backup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call settingsPostValidateBeforeCall(BackupSettingsRequestBody backupSettingsRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'backupSettingsRequestBody' is set
        if (backupSettingsRequestBody == null) {
            throw new ApiException("Missing the required parameter 'backupSettingsRequestBody' when calling settingsPost(Async)");
        }

        return settingsPostCall(backupSettingsRequestBody, _callback);

    }


    private ApiResponse<BackupSettingsResponse> settingsPostWithHttpInfo(BackupSettingsRequestBody backupSettingsRequestBody) throws ApiException {
        okhttp3.Call localVarCall = settingsPostValidateBeforeCall(backupSettingsRequestBody, null);
        Type localVarReturnType = new TypeToken<BackupSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call settingsPostAsync(BackupSettingsRequestBody backupSettingsRequestBody, final ApiCallback<BackupSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = settingsPostValidateBeforeCall(backupSettingsRequestBody, _callback);
        Type localVarReturnType = new TypeToken<BackupSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SettingsPostRequestBuilder {
        private final String password;

        private SettingsPostRequestBuilder(String password) {
            this.password = password;
        }

        /**
         * Build call for settingsPost
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BackupSettingsRequestBody backupSettingsRequestBody = buildBodyParams();
            return settingsPostCall(backupSettingsRequestBody, _callback);
        }

        private BackupSettingsRequestBody buildBodyParams() {
            BackupSettingsRequestBody backupSettingsRequestBody = new BackupSettingsRequestBody();
            backupSettingsRequestBody.password(this.password);
            return backupSettingsRequestBody;
        }

        /**
         * Execute settingsPost request
         * @return BackupSettingsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public BackupSettingsResponse execute() throws ApiException {
            BackupSettingsRequestBody backupSettingsRequestBody = buildBodyParams();
            ApiResponse<BackupSettingsResponse> localVarResp = settingsPostWithHttpInfo(backupSettingsRequestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute settingsPost request with HTTP info returned
         * @return ApiResponse&lt;BackupSettingsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BackupSettingsResponse> executeWithHttpInfo() throws ApiException {
            BackupSettingsRequestBody backupSettingsRequestBody = buildBodyParams();
            return settingsPostWithHttpInfo(backupSettingsRequestBody);
        }

        /**
         * Execute settingsPost request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BackupSettingsResponse> _callback) throws ApiException {
            BackupSettingsRequestBody backupSettingsRequestBody = buildBodyParams();
            return settingsPostAsync(backupSettingsRequestBody, _callback);
        }
    }

    /**
     * Backup-Settings
     * 
     * @param backupSettingsRequestBody  (required)
     * @return SettingsPostRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SettingsPostRequestBuilder settingsPost(String password) throws IllegalArgumentException {
        if (password == null) throw new IllegalArgumentException("\"password\" is required but got null");
            

        return new SettingsPostRequestBuilder(password);
    }
    private okhttp3.Call settingsPost_0Call(RestoreSettingsRequestBody restoreSettingsRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = restoreSettingsRequestBody;

        // create path and map variables
        String localVarPath = "/settings/restore";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call settingsPost_0ValidateBeforeCall(RestoreSettingsRequestBody restoreSettingsRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'restoreSettingsRequestBody' is set
        if (restoreSettingsRequestBody == null) {
            throw new ApiException("Missing the required parameter 'restoreSettingsRequestBody' when calling settingsPost_0(Async)");
        }

        return settingsPost_0Call(restoreSettingsRequestBody, _callback);

    }


    private ApiResponse<Void> settingsPost_0WithHttpInfo(RestoreSettingsRequestBody restoreSettingsRequestBody) throws ApiException {
        okhttp3.Call localVarCall = settingsPost_0ValidateBeforeCall(restoreSettingsRequestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call settingsPost_0Async(RestoreSettingsRequestBody restoreSettingsRequestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = settingsPost_0ValidateBeforeCall(restoreSettingsRequestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SettingsPost0RequestBuilder {
        private final String data;
        private final String password;

        private SettingsPost0RequestBuilder(String data, String password) {
            this.data = data;
            this.password = password;
        }

        /**
         * Build call for settingsPost_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RestoreSettingsRequestBody restoreSettingsRequestBody = buildBodyParams();
            return settingsPost_0Call(restoreSettingsRequestBody, _callback);
        }

        private RestoreSettingsRequestBody buildBodyParams() {
            RestoreSettingsRequestBody restoreSettingsRequestBody = new RestoreSettingsRequestBody();
            restoreSettingsRequestBody.data(this.data);
            restoreSettingsRequestBody.password(this.password);
            return restoreSettingsRequestBody;
        }

        /**
         * Execute settingsPost_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            RestoreSettingsRequestBody restoreSettingsRequestBody = buildBodyParams();
            settingsPost_0WithHttpInfo(restoreSettingsRequestBody);
        }

        /**
         * Execute settingsPost_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            RestoreSettingsRequestBody restoreSettingsRequestBody = buildBodyParams();
            return settingsPost_0WithHttpInfo(restoreSettingsRequestBody);
        }

        /**
         * Execute settingsPost_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            RestoreSettingsRequestBody restoreSettingsRequestBody = buildBodyParams();
            return settingsPost_0Async(restoreSettingsRequestBody, _callback);
        }
    }

    /**
     * Restore-Settings
     * 
     * @param restoreSettingsRequestBody  (required)
     * @return SettingsPost0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SettingsPost0RequestBuilder settingsPost_0(String data, String password) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
            

        if (password == null) throw new IllegalArgumentException("\"password\" is required but got null");
            

        return new SettingsPost0RequestBuilder(data, password);
    }
}
