/*
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ApplicationSettings;
import com.konfigthis.client.model.GetMediaProvidersResponse;
import com.konfigthis.client.model.Media;
import com.konfigthis.client.model.MediaProvider;
import com.konfigthis.client.model.Response;
import com.konfigthis.client.model.SetShardsRequestBody;
import com.konfigthis.client.model.Webhooks;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ApplicationApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApplicationApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ApplicationApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getSettingsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/settings/application";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSettingsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getSettingsCall(_callback);

    }


    private ApiResponse<ApplicationSettings> getSettingsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getSettingsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ApplicationSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSettingsAsync(final ApiCallback<ApplicationSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSettingsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ApplicationSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSettingsRequestBuilder {

        private GetSettingsRequestBuilder() {
        }

        /**
         * Build call for getSettings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSettingsCall(_callback);
        }


        /**
         * Execute getSettings request
         * @return ApplicationSettings
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApplicationSettings execute() throws ApiException {
            ApiResponse<ApplicationSettings> localVarResp = getSettingsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSettings request with HTTP info returned
         * @return ApiResponse&lt;ApplicationSettings&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ApplicationSettings> executeWithHttpInfo() throws ApiException {
            return getSettingsWithHttpInfo();
        }

        /**
         * Execute getSettings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ApplicationSettings> _callback) throws ApiException {
            return getSettingsAsync(_callback);
        }
    }

    /**
     * Get-Application-Settings
     * 
     * @return GetSettingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetSettingsRequestBuilder getSettings() throws IllegalArgumentException {
        return new GetSettingsRequestBuilder();
    }
    private okhttp3.Call listMediaProvidersCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/settings/application/media/providers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMediaProvidersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listMediaProvidersCall(_callback);

    }


    private ApiResponse<GetMediaProvidersResponse> listMediaProvidersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listMediaProvidersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetMediaProvidersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listMediaProvidersAsync(final ApiCallback<GetMediaProvidersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMediaProvidersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetMediaProvidersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListMediaProvidersRequestBuilder {

        private ListMediaProvidersRequestBuilder() {
        }

        /**
         * Build call for listMediaProviders
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listMediaProvidersCall(_callback);
        }


        /**
         * Execute listMediaProviders request
         * @return GetMediaProvidersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public GetMediaProvidersResponse execute() throws ApiException {
            ApiResponse<GetMediaProvidersResponse> localVarResp = listMediaProvidersWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listMediaProviders request with HTTP info returned
         * @return ApiResponse&lt;GetMediaProvidersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetMediaProvidersResponse> executeWithHttpInfo() throws ApiException {
            return listMediaProvidersWithHttpInfo();
        }

        /**
         * Execute listMediaProviders request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetMediaProvidersResponse> _callback) throws ApiException {
            return listMediaProvidersAsync(_callback);
        }
    }

    /**
     * Get-Media-Providers
     * 
     * @return ListMediaProvidersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ListMediaProvidersRequestBuilder listMediaProviders() throws IllegalArgumentException {
        return new ListMediaProvidersRequestBuilder();
    }
    private okhttp3.Call removeProviderCall(String providerName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/settings/application/media/providers/{ProviderName}"
            .replace("{" + "ProviderName" + "}", localVarApiClient.escapeString(providerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeProviderValidateBeforeCall(String providerName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'providerName' is set
        if (providerName == null) {
            throw new ApiException("Missing the required parameter 'providerName' when calling removeProvider(Async)");
        }

        return removeProviderCall(providerName, _callback);

    }


    private ApiResponse<Void> removeProviderWithHttpInfo(String providerName) throws ApiException {
        okhttp3.Call localVarCall = removeProviderValidateBeforeCall(providerName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeProviderAsync(String providerName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeProviderValidateBeforeCall(providerName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveProviderRequestBuilder {
        private final String providerName;

        private RemoveProviderRequestBuilder(String providerName) {
            this.providerName = providerName;
        }

        /**
         * Build call for removeProvider
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeProviderCall(providerName, _callback);
        }


        /**
         * Execute removeProvider request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeProviderWithHttpInfo(providerName);
        }

        /**
         * Execute removeProvider request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeProviderWithHttpInfo(providerName);
        }

        /**
         * Execute removeProvider request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeProviderAsync(providerName, _callback);
        }
    }

    /**
     * Delete-Media-Providers
     * 
     * @param providerName Provider Name (required)
     * @return RemoveProviderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RemoveProviderRequestBuilder removeProvider(String providerName) throws IllegalArgumentException {
        if (providerName == null) throw new IllegalArgumentException("\"providerName\" is required but got null");
            

        return new RemoveProviderRequestBuilder(providerName);
    }
    private okhttp3.Call resetSettingsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/settings/application";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetSettingsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return resetSettingsCall(_callback);

    }


    private ApiResponse<Void> resetSettingsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = resetSettingsValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call resetSettingsAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetSettingsValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ResetSettingsRequestBuilder {

        private ResetSettingsRequestBuilder() {
        }

        /**
         * Build call for resetSettings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return resetSettingsCall(_callback);
        }


        /**
         * Execute resetSettings request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            resetSettingsWithHttpInfo();
        }

        /**
         * Execute resetSettings request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return resetSettingsWithHttpInfo();
        }

        /**
         * Execute resetSettings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return resetSettingsAsync(_callback);
        }
    }

    /**
     * Reset-Application-Settings
     * 
     * @return ResetSettingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ResetSettingsRequestBuilder resetSettings() throws IllegalArgumentException {
        return new ResetSettingsRequestBuilder();
    }
    private okhttp3.Call setShardsCall(SetShardsRequestBody setShardsRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setShardsRequestBody;

        // create path and map variables
        String localVarPath = "/account/shards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setShardsValidateBeforeCall(SetShardsRequestBody setShardsRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'setShardsRequestBody' is set
        if (setShardsRequestBody == null) {
            throw new ApiException("Missing the required parameter 'setShardsRequestBody' when calling setShards(Async)");
        }

        return setShardsCall(setShardsRequestBody, _callback);

    }


    private ApiResponse<Void> setShardsWithHttpInfo(SetShardsRequestBody setShardsRequestBody) throws ApiException {
        okhttp3.Call localVarCall = setShardsValidateBeforeCall(setShardsRequestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call setShardsAsync(SetShardsRequestBody setShardsRequestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setShardsValidateBeforeCall(setShardsRequestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SetShardsRequestBuilder {
        private final String cc;
        private final String phoneNumber;
        private final String pin;
        private final Integer shards;

        private SetShardsRequestBuilder(String cc, String phoneNumber, String pin, Integer shards) {
            this.cc = cc;
            this.phoneNumber = phoneNumber;
            this.pin = pin;
            this.shards = shards;
        }

        /**
         * Build call for setShards
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SetShardsRequestBody setShardsRequestBody = buildBodyParams();
            return setShardsCall(setShardsRequestBody, _callback);
        }

        private SetShardsRequestBody buildBodyParams() {
            SetShardsRequestBody setShardsRequestBody = new SetShardsRequestBody();
            setShardsRequestBody.cc(this.cc);
            setShardsRequestBody.phoneNumber(this.phoneNumber);
            setShardsRequestBody.pin(this.pin);
            if (this.shards != null)
            setShardsRequestBody.shards(SetShardsRequestBody.ShardsEnum.fromValue(this.shards));
            return setShardsRequestBody;
        }

        /**
         * Execute setShards request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            SetShardsRequestBody setShardsRequestBody = buildBodyParams();
            setShardsWithHttpInfo(setShardsRequestBody);
        }

        /**
         * Execute setShards request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            SetShardsRequestBody setShardsRequestBody = buildBodyParams();
            return setShardsWithHttpInfo(setShardsRequestBody);
        }

        /**
         * Execute setShards request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            SetShardsRequestBody setShardsRequestBody = buildBodyParams();
            return setShardsAsync(setShardsRequestBody, _callback);
        }
    }

    /**
     * Set-Shards
     * 
     * @param setShardsRequestBody  (required)
     * @return SetShardsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SetShardsRequestBuilder setShards(String cc, String phoneNumber, String pin, Integer shards) throws IllegalArgumentException {
        if (cc == null) throw new IllegalArgumentException("\"cc\" is required but got null");
            

        if (phoneNumber == null) throw new IllegalArgumentException("\"phoneNumber\" is required but got null");
            

        if (pin == null) throw new IllegalArgumentException("\"pin\" is required but got null");
            

        if (shards == null) throw new IllegalArgumentException("\"shards\" is required but got null");
        return new SetShardsRequestBuilder(cc, phoneNumber, pin, shards);
    }
    private okhttp3.Call updateMediaProvidersCall(List<MediaProvider> mediaProvider, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = mediaProvider;

        // create path and map variables
        String localVarPath = "/settings/application/media/providers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMediaProvidersValidateBeforeCall(List<MediaProvider> mediaProvider, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mediaProvider' is set
        if (mediaProvider == null) {
            throw new ApiException("Missing the required parameter 'mediaProvider' when calling updateMediaProviders(Async)");
        }

        return updateMediaProvidersCall(mediaProvider, _callback);

    }


    private ApiResponse<Void> updateMediaProvidersWithHttpInfo(List<MediaProvider> mediaProvider) throws ApiException {
        okhttp3.Call localVarCall = updateMediaProvidersValidateBeforeCall(mediaProvider, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateMediaProvidersAsync(List<MediaProvider> mediaProvider, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMediaProvidersValidateBeforeCall(mediaProvider, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateMediaProvidersRequestBuilder {
        private List<MediaProvider> mediaProvider;

        private UpdateMediaProvidersRequestBuilder() {
        }

        /**
         * Set mediaProvider
         * @param mediaProvider  (optional)
         * @return UpdateMediaProvidersRequestBuilder
         */
        public UpdateMediaProvidersRequestBuilder mediaProvider(List<MediaProvider> mediaProvider) {
            this.mediaProvider = mediaProvider;
            return this;
        }

        /**
         * Build call for updateMediaProviders
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<MediaProvider> mediaProvider = buildBodyParams();
            return updateMediaProvidersCall(mediaProvider, _callback);
        }

        private List<MediaProvider> buildBodyParams() {
            return this.mediaProvider;
        }

        /**
         * Execute updateMediaProviders request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            List<MediaProvider> mediaProvider = buildBodyParams();
            updateMediaProvidersWithHttpInfo(mediaProvider);
        }

        /**
         * Execute updateMediaProviders request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            List<MediaProvider> mediaProvider = buildBodyParams();
            return updateMediaProvidersWithHttpInfo(mediaProvider);
        }

        /**
         * Execute updateMediaProviders request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            List<MediaProvider> mediaProvider = buildBodyParams();
            return updateMediaProvidersAsync(mediaProvider, _callback);
        }
    }

    /**
     * Update-Media-Providers
     * 
     * @param mediaProvider  (required)
     * @return UpdateMediaProvidersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMediaProvidersRequestBuilder updateMediaProviders() throws IllegalArgumentException {
        return new UpdateMediaProvidersRequestBuilder();
    }
    private okhttp3.Call updateSettingsCall(ApplicationSettings applicationSettings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicationSettings;

        // create path and map variables
        String localVarPath = "/settings/application";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSettingsValidateBeforeCall(ApplicationSettings applicationSettings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationSettings' is set
        if (applicationSettings == null) {
            throw new ApiException("Missing the required parameter 'applicationSettings' when calling updateSettings(Async)");
        }

        return updateSettingsCall(applicationSettings, _callback);

    }


    private ApiResponse<Response> updateSettingsWithHttpInfo(ApplicationSettings applicationSettings) throws ApiException {
        okhttp3.Call localVarCall = updateSettingsValidateBeforeCall(applicationSettings, null);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSettingsAsync(ApplicationSettings applicationSettings, final ApiCallback<Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSettingsValidateBeforeCall(applicationSettings, _callback);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSettingsRequestBuilder {
        private String callbackBackoffDelayMs;
        private Boolean callbackPersist;
        private Integer heartbeatInterval;
        private String maxCallbackBackoffDelayMs;
        private Media media;
        private String onCallPager;
        private Boolean passThrough;
        private Boolean sentStatus;
        private Integer unhealthyInterval;
        private Webhooks webhooks;

        private UpdateSettingsRequestBuilder() {
        }

        /**
         * Set callbackBackoffDelayMs
         * @param callbackBackoffDelayMs Backoff delay for a failed callback in milliseconds This setting is used to configure the amount of time the backoff delays before retrying a failed callback. The backoff delay increases linearly by this value each time a callback fails to get a HTTPS 200 OK response. The backoff delay is capped by the max_callback_backoff_delay_ms setting. (optional, default to 3000)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder callbackBackoffDelayMs(String callbackBackoffDelayMs) {
            this.callbackBackoffDelayMs = callbackBackoffDelayMs;
            return this;
        }
        
        /**
         * Set callbackPersist
         * @param callbackPersist Stores callbacks on disk until they are successfully acknowledged by the Webhook or not. Restart required. (optional, default to true)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder callbackPersist(Boolean callbackPersist) {
            this.callbackPersist = callbackPersist;
            return this;
        }
        
        /**
         * Set heartbeatInterval
         * @param heartbeatInterval Multiconnect: Interval of the Master node monitoring of Coreapp nodes in seconds (optional, default to 5)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder heartbeatInterval(Integer heartbeatInterval) {
            this.heartbeatInterval = heartbeatInterval;
            return this;
        }
        
        /**
         * Set maxCallbackBackoffDelayMs
         * @param maxCallbackBackoffDelayMs Maximum delay for a failed callback in milliseconds (optional, default to 900000)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder maxCallbackBackoffDelayMs(String maxCallbackBackoffDelayMs) {
            this.maxCallbackBackoffDelayMs = maxCallbackBackoffDelayMs;
            return this;
        }
        
        /**
         * Set media
         * @param media  (optional)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder media(Media media) {
            this.media = media;
            return this;
        }
        
        /**
         * Set onCallPager
         * @param onCallPager Set to valid WhatsApp Group with users who wish to see alerts for critical errors and messages. (optional)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder onCallPager(String onCallPager) {
            this.onCallPager = onCallPager;
            return this;
        }
        
        /**
         * Set passThrough
         * @param passThrough When true, removes messages from the local database after they are delivered to or read by the recipient. When false, saves all messages on local storage until they are explicitly deleted. When messages are sent, they are stored in a local database. This database is used as the application&#39;s history. Since the business keeps its own history, you can specify whether you want message pass_through or not. Restart required. (optional, default to true)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder passThrough(Boolean passThrough) {
            this.passThrough = passThrough;
            return this;
        }
        
        /**
         * Set sentStatus
         * @param sentStatus Receive a notification that a message is sent to server. When true, you will receive a message indicating that a message has been sent. If false (default), you will not receive notification. (optional, default to false)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder sentStatus(Boolean sentStatus) {
            this.sentStatus = sentStatus;
            return this;
        }
        
        /**
         * Set unhealthyInterval
         * @param unhealthyInterval Multiconnect: Maximum amount of seconds a Master node waits for a Coreapp node to respond to a heartbeat before considering it unhealthy and starting the failover process. (optional, default to 30)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder unhealthyInterval(Integer unhealthyInterval) {
            this.unhealthyInterval = unhealthyInterval;
            return this;
        }
        
        /**
         * Set webhooks
         * @param webhooks  (optional)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder webhooks(Webhooks webhooks) {
            this.webhooks = webhooks;
            return this;
        }
        
        /**
         * Build call for updateSettings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApplicationSettings applicationSettings = buildBodyParams();
            return updateSettingsCall(applicationSettings, _callback);
        }

        private ApplicationSettings buildBodyParams() {
            ApplicationSettings applicationSettings = new ApplicationSettings();
            applicationSettings.callbackBackoffDelayMs(this.callbackBackoffDelayMs);
            applicationSettings.callbackPersist(this.callbackPersist);
            applicationSettings.heartbeatInterval(this.heartbeatInterval);
            applicationSettings.maxCallbackBackoffDelayMs(this.maxCallbackBackoffDelayMs);
            applicationSettings.media(this.media);
            applicationSettings.onCallPager(this.onCallPager);
            applicationSettings.passThrough(this.passThrough);
            applicationSettings.sentStatus(this.sentStatus);
            applicationSettings.unhealthyInterval(this.unhealthyInterval);
            applicationSettings.webhooks(this.webhooks);
            return applicationSettings;
        }

        /**
         * Execute updateSettings request
         * @return Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Response execute() throws ApiException {
            ApplicationSettings applicationSettings = buildBodyParams();
            ApiResponse<Response> localVarResp = updateSettingsWithHttpInfo(applicationSettings);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSettings request with HTTP info returned
         * @return ApiResponse&lt;Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Response> executeWithHttpInfo() throws ApiException {
            ApplicationSettings applicationSettings = buildBodyParams();
            return updateSettingsWithHttpInfo(applicationSettings);
        }

        /**
         * Execute updateSettings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Response> _callback) throws ApiException {
            ApplicationSettings applicationSettings = buildBodyParams();
            return updateSettingsAsync(applicationSettings, _callback);
        }
    }

    /**
     * Update-Application-Settings
     * If a field is not present in the request, no change is made to that setting. For example, if on_call_pager is not sent with the request, the existing configuration for on_call_pager is unchanged.
     * @param applicationSettings  (required)
     * @return UpdateSettingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSettingsRequestBuilder updateSettings() throws IllegalArgumentException {
        return new UpdateSettingsRequestBuilder();
    }
}
