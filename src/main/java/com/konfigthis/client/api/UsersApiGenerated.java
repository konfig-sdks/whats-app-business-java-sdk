/*
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateUserRequestBody;
import com.konfigthis.client.model.DetailedUserResponse;
import com.konfigthis.client.model.LoginAdminRequestBody;
import com.konfigthis.client.model.UpdateUserRequestBody;
import com.konfigthis.client.model.UserLoginResponse;
import com.konfigthis.client.model.UserResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UsersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createUserCall(CreateUserRequestBody createUserRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUserRequestBody;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUserValidateBeforeCall(CreateUserRequestBody createUserRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createUserRequestBody' is set
        if (createUserRequestBody == null) {
            throw new ApiException("Missing the required parameter 'createUserRequestBody' when calling createUser(Async)");
        }

        return createUserCall(createUserRequestBody, _callback);

    }


    private ApiResponse<UserResponse> createUserWithHttpInfo(CreateUserRequestBody createUserRequestBody) throws ApiException {
        okhttp3.Call localVarCall = createUserValidateBeforeCall(createUserRequestBody, null);
        Type localVarReturnType = new TypeToken<UserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createUserAsync(CreateUserRequestBody createUserRequestBody, final ApiCallback<UserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUserValidateBeforeCall(createUserRequestBody, _callback);
        Type localVarReturnType = new TypeToken<UserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateUserRequestBuilder {
        private final String password;
        private final String username;

        private CreateUserRequestBuilder(String password, String username) {
            this.password = password;
            this.username = username;
        }

        /**
         * Build call for createUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateUserRequestBody createUserRequestBody = buildBodyParams();
            return createUserCall(createUserRequestBody, _callback);
        }

        private CreateUserRequestBody buildBodyParams() {
            CreateUserRequestBody createUserRequestBody = new CreateUserRequestBody();
            createUserRequestBody.password(this.password);
            createUserRequestBody.username(this.username);
            return createUserRequestBody;
        }

        /**
         * Execute createUser request
         * @return UserResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public UserResponse execute() throws ApiException {
            CreateUserRequestBody createUserRequestBody = buildBodyParams();
            ApiResponse<UserResponse> localVarResp = createUserWithHttpInfo(createUserRequestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createUser request with HTTP info returned
         * @return ApiResponse&lt;UserResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserResponse> executeWithHttpInfo() throws ApiException {
            CreateUserRequestBody createUserRequestBody = buildBodyParams();
            return createUserWithHttpInfo(createUserRequestBody);
        }

        /**
         * Execute createUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserResponse> _callback) throws ApiException {
            CreateUserRequestBody createUserRequestBody = buildBodyParams();
            return createUserAsync(createUserRequestBody, _callback);
        }
    }

    /**
     * Create-User
     * 
     * @param createUserRequestBody  (required)
     * @return CreateUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateUserRequestBuilder createUser(String password, String username) throws IllegalArgumentException {
        if (password == null) throw new IllegalArgumentException("\"password\" is required but got null");
            

        if (username == null) throw new IllegalArgumentException("\"username\" is required but got null");
            

        return new CreateUserRequestBuilder(password, username);
    }
    private okhttp3.Call getByUsernameCall(String userUsername, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{UserUsername}"
            .replace("{" + "UserUsername" + "}", localVarApiClient.escapeString(userUsername.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByUsernameValidateBeforeCall(String userUsername, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userUsername' is set
        if (userUsername == null) {
            throw new ApiException("Missing the required parameter 'userUsername' when calling getByUsername(Async)");
        }

        return getByUsernameCall(userUsername, _callback);

    }


    private ApiResponse<DetailedUserResponse> getByUsernameWithHttpInfo(String userUsername) throws ApiException {
        okhttp3.Call localVarCall = getByUsernameValidateBeforeCall(userUsername, null);
        Type localVarReturnType = new TypeToken<DetailedUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByUsernameAsync(String userUsername, final ApiCallback<DetailedUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByUsernameValidateBeforeCall(userUsername, _callback);
        Type localVarReturnType = new TypeToken<DetailedUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByUsernameRequestBuilder {
        private final String userUsername;

        private GetByUsernameRequestBuilder(String userUsername) {
            this.userUsername = userUsername;
        }

        /**
         * Build call for getByUsername
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByUsernameCall(userUsername, _callback);
        }


        /**
         * Execute getByUsername request
         * @return DetailedUserResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public DetailedUserResponse execute() throws ApiException {
            ApiResponse<DetailedUserResponse> localVarResp = getByUsernameWithHttpInfo(userUsername);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByUsername request with HTTP info returned
         * @return ApiResponse&lt;DetailedUserResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DetailedUserResponse> executeWithHttpInfo() throws ApiException {
            return getByUsernameWithHttpInfo(userUsername);
        }

        /**
         * Execute getByUsername request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DetailedUserResponse> _callback) throws ApiException {
            return getByUsernameAsync(userUsername, _callback);
        }
    }

    /**
     * Get-User
     * 
     * @param userUsername  (required)
     * @return GetByUsernameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetByUsernameRequestBuilder getByUsername(String userUsername) throws IllegalArgumentException {
        if (userUsername == null) throw new IllegalArgumentException("\"userUsername\" is required but got null");
            

        return new GetByUsernameRequestBuilder(userUsername);
    }
    private okhttp3.Call performLoginCall(LoginAdminRequestBody loginAdminRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = loginAdminRequestBody;

        // create path and map variables
        String localVarPath = "/users/login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "httpBasic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call performLoginValidateBeforeCall(LoginAdminRequestBody loginAdminRequestBody, final ApiCallback _callback) throws ApiException {
        return performLoginCall(loginAdminRequestBody, _callback);

    }


    private ApiResponse<UserLoginResponse> performLoginWithHttpInfo(LoginAdminRequestBody loginAdminRequestBody) throws ApiException {
        okhttp3.Call localVarCall = performLoginValidateBeforeCall(loginAdminRequestBody, null);
        Type localVarReturnType = new TypeToken<UserLoginResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call performLoginAsync(LoginAdminRequestBody loginAdminRequestBody, final ApiCallback<UserLoginResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = performLoginValidateBeforeCall(loginAdminRequestBody, _callback);
        Type localVarReturnType = new TypeToken<UserLoginResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PerformLoginRequestBuilder {
        private final String newPassword;

        private PerformLoginRequestBuilder(String newPassword) {
            this.newPassword = newPassword;
        }

        /**
         * Build call for performLogin
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LoginAdminRequestBody loginAdminRequestBody = buildBodyParams();
            return performLoginCall(loginAdminRequestBody, _callback);
        }

        private LoginAdminRequestBody buildBodyParams() {
            LoginAdminRequestBody loginAdminRequestBody = new LoginAdminRequestBody();
            loginAdminRequestBody.newPassword(this.newPassword);
            return loginAdminRequestBody;
        }

        /**
         * Execute performLogin request
         * @return UserLoginResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public UserLoginResponse execute() throws ApiException {
            LoginAdminRequestBody loginAdminRequestBody = buildBodyParams();
            ApiResponse<UserLoginResponse> localVarResp = performLoginWithHttpInfo(loginAdminRequestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute performLogin request with HTTP info returned
         * @return ApiResponse&lt;UserLoginResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserLoginResponse> executeWithHttpInfo() throws ApiException {
            LoginAdminRequestBody loginAdminRequestBody = buildBodyParams();
            return performLoginWithHttpInfo(loginAdminRequestBody);
        }

        /**
         * Execute performLogin request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserLoginResponse> _callback) throws ApiException {
            LoginAdminRequestBody loginAdminRequestBody = buildBodyParams();
            return performLoginAsync(loginAdminRequestBody, _callback);
        }
    }

    /**
     * Login-User
     * 
     * @return PerformLoginRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PerformLoginRequestBuilder performLogin(String newPassword) throws IllegalArgumentException {
        if (newPassword == null) throw new IllegalArgumentException("\"newPassword\" is required but got null");
            

        return new PerformLoginRequestBuilder(newPassword);
    }
    private okhttp3.Call performLogoutCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/logout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call performLogoutValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return performLogoutCall(_callback);

    }


    private ApiResponse<Void> performLogoutWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = performLogoutValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call performLogoutAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = performLogoutValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class PerformLogoutRequestBuilder {

        private PerformLogoutRequestBuilder() {
        }

        /**
         * Build call for performLogout
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return performLogoutCall(_callback);
        }


        /**
         * Execute performLogout request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            performLogoutWithHttpInfo();
        }

        /**
         * Execute performLogout request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return performLogoutWithHttpInfo();
        }

        /**
         * Execute performLogout request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return performLogoutAsync(_callback);
        }
    }

    /**
     * Logout-User
     * 
     * @return PerformLogoutRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PerformLogoutRequestBuilder performLogout() throws IllegalArgumentException {
        return new PerformLogoutRequestBuilder();
    }
    private okhttp3.Call removeUserCall(String userUsername, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{UserUsername}"
            .replace("{" + "UserUsername" + "}", localVarApiClient.escapeString(userUsername.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeUserValidateBeforeCall(String userUsername, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userUsername' is set
        if (userUsername == null) {
            throw new ApiException("Missing the required parameter 'userUsername' when calling removeUser(Async)");
        }

        return removeUserCall(userUsername, _callback);

    }


    private ApiResponse<UserResponse> removeUserWithHttpInfo(String userUsername) throws ApiException {
        okhttp3.Call localVarCall = removeUserValidateBeforeCall(userUsername, null);
        Type localVarReturnType = new TypeToken<UserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeUserAsync(String userUsername, final ApiCallback<UserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeUserValidateBeforeCall(userUsername, _callback);
        Type localVarReturnType = new TypeToken<UserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveUserRequestBuilder {
        private final String userUsername;

        private RemoveUserRequestBuilder(String userUsername) {
            this.userUsername = userUsername;
        }

        /**
         * Build call for removeUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeUserCall(userUsername, _callback);
        }


        /**
         * Execute removeUser request
         * @return UserResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public UserResponse execute() throws ApiException {
            ApiResponse<UserResponse> localVarResp = removeUserWithHttpInfo(userUsername);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeUser request with HTTP info returned
         * @return ApiResponse&lt;UserResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserResponse> executeWithHttpInfo() throws ApiException {
            return removeUserWithHttpInfo(userUsername);
        }

        /**
         * Execute removeUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserResponse> _callback) throws ApiException {
            return removeUserAsync(userUsername, _callback);
        }
    }

    /**
     * Delete-User
     * 
     * @param userUsername  (required)
     * @return RemoveUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RemoveUserRequestBuilder removeUser(String userUsername) throws IllegalArgumentException {
        if (userUsername == null) throw new IllegalArgumentException("\"userUsername\" is required but got null");
            

        return new RemoveUserRequestBuilder(userUsername);
    }
    private okhttp3.Call updateUserCall(String userUsername, UpdateUserRequestBody updateUserRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateUserRequestBody;

        // create path and map variables
        String localVarPath = "/users/{UserUsername}"
            .replace("{" + "UserUsername" + "}", localVarApiClient.escapeString(userUsername.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserValidateBeforeCall(String userUsername, UpdateUserRequestBody updateUserRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userUsername' is set
        if (userUsername == null) {
            throw new ApiException("Missing the required parameter 'userUsername' when calling updateUser(Async)");
        }

        // verify the required parameter 'updateUserRequestBody' is set
        if (updateUserRequestBody == null) {
            throw new ApiException("Missing the required parameter 'updateUserRequestBody' when calling updateUser(Async)");
        }

        return updateUserCall(userUsername, updateUserRequestBody, _callback);

    }


    private ApiResponse<UserResponse> updateUserWithHttpInfo(String userUsername, UpdateUserRequestBody updateUserRequestBody) throws ApiException {
        okhttp3.Call localVarCall = updateUserValidateBeforeCall(userUsername, updateUserRequestBody, null);
        Type localVarReturnType = new TypeToken<UserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateUserAsync(String userUsername, UpdateUserRequestBody updateUserRequestBody, final ApiCallback<UserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserValidateBeforeCall(userUsername, updateUserRequestBody, _callback);
        Type localVarReturnType = new TypeToken<UserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateUserRequestBuilder {
        private final String password;
        private final String userUsername;

        private UpdateUserRequestBuilder(String password, String userUsername) {
            this.password = password;
            this.userUsername = userUsername;
        }

        /**
         * Build call for updateUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateUserRequestBody updateUserRequestBody = buildBodyParams();
            return updateUserCall(userUsername, updateUserRequestBody, _callback);
        }

        private UpdateUserRequestBody buildBodyParams() {
            UpdateUserRequestBody updateUserRequestBody = new UpdateUserRequestBody();
            updateUserRequestBody.password(this.password);
            return updateUserRequestBody;
        }

        /**
         * Execute updateUser request
         * @return UserResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public UserResponse execute() throws ApiException {
            UpdateUserRequestBody updateUserRequestBody = buildBodyParams();
            ApiResponse<UserResponse> localVarResp = updateUserWithHttpInfo(userUsername, updateUserRequestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateUser request with HTTP info returned
         * @return ApiResponse&lt;UserResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserResponse> executeWithHttpInfo() throws ApiException {
            UpdateUserRequestBody updateUserRequestBody = buildBodyParams();
            return updateUserWithHttpInfo(userUsername, updateUserRequestBody);
        }

        /**
         * Execute updateUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserResponse> _callback) throws ApiException {
            UpdateUserRequestBody updateUserRequestBody = buildBodyParams();
            return updateUserAsync(userUsername, updateUserRequestBody, _callback);
        }
    }

    /**
     * Update-User
     * 
     * @param userUsername  (required)
     * @param updateUserRequestBody  (required)
     * @return UpdateUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateUserRequestBuilder updateUser(String password, String userUsername) throws IllegalArgumentException {
        if (password == null) throw new IllegalArgumentException("\"password\" is required but got null");
            

        if (userUsername == null) throw new IllegalArgumentException("\"userUsername\" is required but got null");
            

        return new UpdateUserRequestBuilder(password, userUsername);
    }
}
