/*
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Contact;
import com.konfigthis.client.model.Hsm;
import com.konfigthis.client.model.Location;
import com.konfigthis.client.model.MarkMessageAsReadRequestBody;
import com.konfigthis.client.model.MessageResponse;
import com.konfigthis.client.model.MessageType;
import com.konfigthis.client.model.SendMessageRequestBody;
import com.konfigthis.client.model.Text;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MessagesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MessagesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public MessagesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call markAsReadCall(String messageID, MarkMessageAsReadRequestBody markMessageAsReadRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = markMessageAsReadRequestBody;

        // create path and map variables
        String localVarPath = "/messages/{MessageID}"
            .replace("{" + "MessageID" + "}", localVarApiClient.escapeString(messageID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call markAsReadValidateBeforeCall(String messageID, MarkMessageAsReadRequestBody markMessageAsReadRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'messageID' is set
        if (messageID == null) {
            throw new ApiException("Missing the required parameter 'messageID' when calling markAsRead(Async)");
        }

        // verify the required parameter 'markMessageAsReadRequestBody' is set
        if (markMessageAsReadRequestBody == null) {
            throw new ApiException("Missing the required parameter 'markMessageAsReadRequestBody' when calling markAsRead(Async)");
        }

        return markAsReadCall(messageID, markMessageAsReadRequestBody, _callback);

    }


    private ApiResponse<Void> markAsReadWithHttpInfo(String messageID, MarkMessageAsReadRequestBody markMessageAsReadRequestBody) throws ApiException {
        okhttp3.Call localVarCall = markAsReadValidateBeforeCall(messageID, markMessageAsReadRequestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call markAsReadAsync(String messageID, MarkMessageAsReadRequestBody markMessageAsReadRequestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = markAsReadValidateBeforeCall(messageID, markMessageAsReadRequestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class MarkAsReadRequestBuilder {
        private final String status;
        private final String messageID;

        private MarkAsReadRequestBuilder(String status, String messageID) {
            this.status = status;
            this.messageID = messageID;
        }

        /**
         * Build call for markAsRead
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MarkMessageAsReadRequestBody markMessageAsReadRequestBody = buildBodyParams();
            return markAsReadCall(messageID, markMessageAsReadRequestBody, _callback);
        }

        private MarkMessageAsReadRequestBody buildBodyParams() {
            MarkMessageAsReadRequestBody markMessageAsReadRequestBody = new MarkMessageAsReadRequestBody();
            markMessageAsReadRequestBody.status(this.status);
            return markMessageAsReadRequestBody;
        }

        /**
         * Execute markAsRead request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            MarkMessageAsReadRequestBody markMessageAsReadRequestBody = buildBodyParams();
            markAsReadWithHttpInfo(messageID, markMessageAsReadRequestBody);
        }

        /**
         * Execute markAsRead request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            MarkMessageAsReadRequestBody markMessageAsReadRequestBody = buildBodyParams();
            return markAsReadWithHttpInfo(messageID, markMessageAsReadRequestBody);
        }

        /**
         * Execute markAsRead request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            MarkMessageAsReadRequestBody markMessageAsReadRequestBody = buildBodyParams();
            return markAsReadAsync(messageID, markMessageAsReadRequestBody, _callback);
        }
    }

    /**
     * Mark-Message-As-Read
     * 
     * @param messageID Message ID from Webhook (required)
     * @param markMessageAsReadRequestBody  (required)
     * @return MarkAsReadRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public MarkAsReadRequestBuilder markAsRead(String status, String messageID) throws IllegalArgumentException {
        if (status == null) throw new IllegalArgumentException("\"status\" is required but got null");
            

        if (messageID == null) throw new IllegalArgumentException("\"messageID\" is required but got null");
            

        return new MarkAsReadRequestBuilder(status, messageID);
    }
    private okhttp3.Call sendMessageCall(SendMessageRequestBody sendMessageRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendMessageRequestBody;

        // create path and map variables
        String localVarPath = "/messages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendMessageValidateBeforeCall(SendMessageRequestBody sendMessageRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sendMessageRequestBody' is set
        if (sendMessageRequestBody == null) {
            throw new ApiException("Missing the required parameter 'sendMessageRequestBody' when calling sendMessage(Async)");
        }

        return sendMessageCall(sendMessageRequestBody, _callback);

    }


    private ApiResponse<MessageResponse> sendMessageWithHttpInfo(SendMessageRequestBody sendMessageRequestBody) throws ApiException {
        okhttp3.Call localVarCall = sendMessageValidateBeforeCall(sendMessageRequestBody, null);
        Type localVarReturnType = new TypeToken<MessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sendMessageAsync(SendMessageRequestBody sendMessageRequestBody, final ApiCallback<MessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendMessageValidateBeforeCall(sendMessageRequestBody, _callback);
        Type localVarReturnType = new TypeToken<MessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SendMessageRequestBuilder {
        private final String to;
        private Object audio;
        private List<Contact> contacts;
        private Object document;
        private Hsm hsm;
        private Object image;
        private Location location;
        private Boolean previewUrl;
        private String recipientType;
        private Text text;
        private Object ttl;
        private MessageType type;
        private Object video;

        private SendMessageRequestBuilder(String to) {
            this.to = to;
        }

        /**
         * Set audio
         * @param audio  (optional)
         * @return SendMessageRequestBuilder
         */
        public SendMessageRequestBuilder audio(Object audio) {
            this.audio = audio;
            return this;
        }
        
        /**
         * Set contacts
         * @param contacts  (optional)
         * @return SendMessageRequestBuilder
         */
        public SendMessageRequestBuilder contacts(List<Contact> contacts) {
            this.contacts = contacts;
            return this;
        }
        
        /**
         * Set document
         * @param document  (optional)
         * @return SendMessageRequestBuilder
         */
        public SendMessageRequestBuilder document(Object document) {
            this.document = document;
            return this;
        }
        
        /**
         * Set hsm
         * @param hsm  (optional)
         * @return SendMessageRequestBuilder
         */
        public SendMessageRequestBuilder hsm(Hsm hsm) {
            this.hsm = hsm;
            return this;
        }
        
        /**
         * Set image
         * @param image  (optional)
         * @return SendMessageRequestBuilder
         */
        public SendMessageRequestBuilder image(Object image) {
            this.image = image;
            return this;
        }
        
        /**
         * Set location
         * @param location  (optional)
         * @return SendMessageRequestBuilder
         */
        public SendMessageRequestBuilder location(Location location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set previewUrl
         * @param previewUrl Specifying preview_url in the request is optional when not including a URL in your message. To include a URL preview, set preview_url to true in the message body and make sure the URL begins with http:// or https://. For more information, see the Sending URLs in Text Messages section. (optional)
         * @return SendMessageRequestBuilder
         */
        public SendMessageRequestBuilder previewUrl(Boolean previewUrl) {
            this.previewUrl = previewUrl;
            return this;
        }
        
        /**
         * Set recipientType
         * @param recipientType Determines whether the recipient is an individual or a group Specifying recipient_type in the request is optional when the value is individual. However, recipient_type is required when using group. If sending a text message to a group, see the Sending Group Messages documentation. (optional, default to individual)
         * @return SendMessageRequestBuilder
         */
        public SendMessageRequestBuilder recipientType(String recipientType) {
            this.recipientType = recipientType;
            return this;
        }
        
        /**
         * Set text
         * @param text  (optional)
         * @return SendMessageRequestBuilder
         */
        public SendMessageRequestBuilder text(Text text) {
            this.text = text;
            return this;
        }
        
        /**
         * Set ttl
         * @param ttl  (optional)
         * @return SendMessageRequestBuilder
         */
        public SendMessageRequestBuilder ttl(Object ttl) {
            this.ttl = ttl;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional, default to text)
         * @return SendMessageRequestBuilder
         */
        public SendMessageRequestBuilder type(MessageType type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set video
         * @param video  (optional)
         * @return SendMessageRequestBuilder
         */
        public SendMessageRequestBuilder video(Object video) {
            this.video = video;
            return this;
        }
        
        /**
         * Build call for sendMessage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SendMessageRequestBody sendMessageRequestBody = buildBodyParams();
            return sendMessageCall(sendMessageRequestBody, _callback);
        }

        private SendMessageRequestBody buildBodyParams() {
            SendMessageRequestBody sendMessageRequestBody = new SendMessageRequestBody();
            sendMessageRequestBody.audio(this.audio);
            sendMessageRequestBody.contacts(this.contacts);
            sendMessageRequestBody.document(this.document);
            sendMessageRequestBody.hsm(this.hsm);
            sendMessageRequestBody.image(this.image);
            sendMessageRequestBody.location(this.location);
            sendMessageRequestBody.previewUrl(this.previewUrl);
            if (this.recipientType != null)
            sendMessageRequestBody.recipientType(SendMessageRequestBody.RecipientTypeEnum.fromValue(this.recipientType));
            sendMessageRequestBody.text(this.text);
            sendMessageRequestBody.to(this.to);
            sendMessageRequestBody.ttl(this.ttl);
            sendMessageRequestBody.type(this.type);
            sendMessageRequestBody.video(this.video);
            return sendMessageRequestBody;
        }

        /**
         * Execute sendMessage request
         * @return MessageResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public MessageResponse execute() throws ApiException {
            SendMessageRequestBody sendMessageRequestBody = buildBodyParams();
            ApiResponse<MessageResponse> localVarResp = sendMessageWithHttpInfo(sendMessageRequestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute sendMessage request with HTTP info returned
         * @return ApiResponse&lt;MessageResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MessageResponse> executeWithHttpInfo() throws ApiException {
            SendMessageRequestBody sendMessageRequestBody = buildBodyParams();
            return sendMessageWithHttpInfo(sendMessageRequestBody);
        }

        /**
         * Execute sendMessage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MessageResponse> _callback) throws ApiException {
            SendMessageRequestBody sendMessageRequestBody = buildBodyParams();
            return sendMessageAsync(sendMessageRequestBody, _callback);
        }
    }

    /**
     * Send-Message
     * 
     * @param sendMessageRequestBody  (required)
     * @return SendMessageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SendMessageRequestBuilder sendMessage(String to) throws IllegalArgumentException {
        if (to == null) throw new IllegalArgumentException("\"to\" is required but got null");
            

        return new SendMessageRequestBuilder(to);
    }
}
