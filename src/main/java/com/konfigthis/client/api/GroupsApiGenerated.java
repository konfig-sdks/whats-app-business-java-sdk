/*
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateGroupRequestBody;
import java.io.File;
import com.konfigthis.client.model.GroupAdminRequestBody;
import com.konfigthis.client.model.GroupInviteResponse;
import com.konfigthis.client.model.GroupResponse;
import com.konfigthis.client.model.GroupsDeleteGroupIconRequest;
import com.konfigthis.client.model.GroupsResponse;
import com.konfigthis.client.model.GroupsSetGroupIconRequest;
import com.konfigthis.client.model.RemoveGroupParticipantRequestBody;
import com.konfigthis.client.model.UpdateGroupInfoRequestBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class GroupsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GroupsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public GroupsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createGroupCall(CreateGroupRequestBody createGroupRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createGroupRequestBody;

        // create path and map variables
        String localVarPath = "/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGroupValidateBeforeCall(CreateGroupRequestBody createGroupRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createGroupRequestBody' is set
        if (createGroupRequestBody == null) {
            throw new ApiException("Missing the required parameter 'createGroupRequestBody' when calling createGroup(Async)");
        }

        return createGroupCall(createGroupRequestBody, _callback);

    }


    private ApiResponse<GroupsResponse> createGroupWithHttpInfo(CreateGroupRequestBody createGroupRequestBody) throws ApiException {
        okhttp3.Call localVarCall = createGroupValidateBeforeCall(createGroupRequestBody, null);
        Type localVarReturnType = new TypeToken<GroupsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createGroupAsync(CreateGroupRequestBody createGroupRequestBody, final ApiCallback<GroupsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGroupValidateBeforeCall(createGroupRequestBody, _callback);
        Type localVarReturnType = new TypeToken<GroupsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateGroupRequestBuilder {
        private final String subject;

        private CreateGroupRequestBuilder(String subject) {
            this.subject = subject;
        }

        /**
         * Build call for createGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateGroupRequestBody createGroupRequestBody = buildBodyParams();
            return createGroupCall(createGroupRequestBody, _callback);
        }

        private CreateGroupRequestBody buildBodyParams() {
            CreateGroupRequestBody createGroupRequestBody = new CreateGroupRequestBody();
            createGroupRequestBody.subject(this.subject);
            return createGroupRequestBody;
        }

        /**
         * Execute createGroup request
         * @return GroupsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public GroupsResponse execute() throws ApiException {
            CreateGroupRequestBody createGroupRequestBody = buildBodyParams();
            ApiResponse<GroupsResponse> localVarResp = createGroupWithHttpInfo(createGroupRequestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createGroup request with HTTP info returned
         * @return ApiResponse&lt;GroupsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupsResponse> executeWithHttpInfo() throws ApiException {
            CreateGroupRequestBody createGroupRequestBody = buildBodyParams();
            return createGroupWithHttpInfo(createGroupRequestBody);
        }

        /**
         * Execute createGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupsResponse> _callback) throws ApiException {
            CreateGroupRequestBody createGroupRequestBody = buildBodyParams();
            return createGroupAsync(createGroupRequestBody, _callback);
        }
    }

    /**
     * Create-Group
     * 
     * @param createGroupRequestBody  (required)
     * @return CreateGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateGroupRequestBuilder createGroup(String subject) throws IllegalArgumentException {
        if (subject == null) throw new IllegalArgumentException("\"subject\" is required but got null");
            

        return new CreateGroupRequestBuilder(subject);
    }
    private okhttp3.Call deleteGroupIconCall(String groupId, File _file, GroupsDeleteGroupIconRequest groupsDeleteGroupIconRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupsDeleteGroupIconRequest;

        // create path and map variables
        String localVarPath = "/groups/{GroupId}/icon"
            .replace("{" + "GroupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("File", _file);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteGroupIconValidateBeforeCall(String groupId, File _file, GroupsDeleteGroupIconRequest groupsDeleteGroupIconRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling deleteGroupIcon(Async)");
        }

        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling deleteGroupIcon(Async)");
        }

        return deleteGroupIconCall(groupId, _file, groupsDeleteGroupIconRequest, _callback);

    }


    private ApiResponse<Void> deleteGroupIconWithHttpInfo(String groupId, File _file, GroupsDeleteGroupIconRequest groupsDeleteGroupIconRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteGroupIconValidateBeforeCall(groupId, _file, groupsDeleteGroupIconRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteGroupIconAsync(String groupId, File _file, GroupsDeleteGroupIconRequest groupsDeleteGroupIconRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteGroupIconValidateBeforeCall(groupId, _file, groupsDeleteGroupIconRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteGroupIconRequestBuilder {
        private final String groupId;
        private final File _file;

        private DeleteGroupIconRequestBuilder(String groupId, File _file) {
            this.groupId = groupId;
            this._file = _file;
        }

        /**
         * Build call for deleteGroupIcon
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GroupsDeleteGroupIconRequest groupsDeleteGroupIconRequest = buildBodyParams();
            return deleteGroupIconCall(groupId, _file, groupsDeleteGroupIconRequest, _callback);
        }

        private GroupsDeleteGroupIconRequest buildBodyParams() {
            GroupsDeleteGroupIconRequest groupsDeleteGroupIconRequest = new GroupsDeleteGroupIconRequest();
            groupsDeleteGroupIconRequest._file(this._file);
            return groupsDeleteGroupIconRequest;
        }

        /**
         * Execute deleteGroupIcon request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            GroupsDeleteGroupIconRequest groupsDeleteGroupIconRequest = buildBodyParams();
            deleteGroupIconWithHttpInfo(groupId, _file, groupsDeleteGroupIconRequest);
        }

        /**
         * Execute deleteGroupIcon request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            GroupsDeleteGroupIconRequest groupsDeleteGroupIconRequest = buildBodyParams();
            return deleteGroupIconWithHttpInfo(groupId, _file, groupsDeleteGroupIconRequest);
        }

        /**
         * Execute deleteGroupIcon request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            GroupsDeleteGroupIconRequest groupsDeleteGroupIconRequest = buildBodyParams();
            return deleteGroupIconAsync(groupId, _file, groupsDeleteGroupIconRequest, _callback);
        }
    }

    /**
     * Delete-Group-Icon
     * 
     * @param groupId  (required)
     * @param _file  (required)
     * @return DeleteGroupIconRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeleteGroupIconRequestBuilder deleteGroupIcon(String groupId, File _file) throws IllegalArgumentException {
        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        if (_file == null) throw new IllegalArgumentException("\"_file\" is required but got null");
        return new DeleteGroupIconRequestBuilder(groupId, _file);
    }
    private okhttp3.Call deleteInviteCall(String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{GroupId}/invite"
            .replace("{" + "GroupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteInviteValidateBeforeCall(String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling deleteInvite(Async)");
        }

        return deleteInviteCall(groupId, _callback);

    }


    private ApiResponse<Void> deleteInviteWithHttpInfo(String groupId) throws ApiException {
        okhttp3.Call localVarCall = deleteInviteValidateBeforeCall(groupId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteInviteAsync(String groupId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteInviteValidateBeforeCall(groupId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteInviteRequestBuilder {
        private final String groupId;

        private DeleteInviteRequestBuilder(String groupId) {
            this.groupId = groupId;
        }

        /**
         * Build call for deleteInvite
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteInviteCall(groupId, _callback);
        }


        /**
         * Execute deleteInvite request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteInviteWithHttpInfo(groupId);
        }

        /**
         * Execute deleteInvite request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteInviteWithHttpInfo(groupId);
        }

        /**
         * Execute deleteInvite request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteInviteAsync(groupId, _callback);
        }
    }

    /**
     * Delete-Group-Invite
     * 
     * @param groupId  (required)
     * @return DeleteInviteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeleteInviteRequestBuilder deleteInvite(String groupId) throws IllegalArgumentException {
        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        return new DeleteInviteRequestBuilder(groupId);
    }
    private okhttp3.Call demoteAdminCall(String groupId, GroupAdminRequestBody groupAdminRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupAdminRequestBody;

        // create path and map variables
        String localVarPath = "/groups/{GroupId}/admins"
            .replace("{" + "GroupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call demoteAdminValidateBeforeCall(String groupId, GroupAdminRequestBody groupAdminRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling demoteAdmin(Async)");
        }

        // verify the required parameter 'groupAdminRequestBody' is set
        if (groupAdminRequestBody == null) {
            throw new ApiException("Missing the required parameter 'groupAdminRequestBody' when calling demoteAdmin(Async)");
        }

        return demoteAdminCall(groupId, groupAdminRequestBody, _callback);

    }


    private ApiResponse<Void> demoteAdminWithHttpInfo(String groupId, GroupAdminRequestBody groupAdminRequestBody) throws ApiException {
        okhttp3.Call localVarCall = demoteAdminValidateBeforeCall(groupId, groupAdminRequestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call demoteAdminAsync(String groupId, GroupAdminRequestBody groupAdminRequestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = demoteAdminValidateBeforeCall(groupId, groupAdminRequestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DemoteAdminRequestBuilder {
        private final List<String> waIds;
        private final String groupId;

        private DemoteAdminRequestBuilder(List<String> waIds, String groupId) {
            this.waIds = waIds;
            this.groupId = groupId;
        }

        /**
         * Build call for demoteAdmin
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GroupAdminRequestBody groupAdminRequestBody = buildBodyParams();
            return demoteAdminCall(groupId, groupAdminRequestBody, _callback);
        }

        private GroupAdminRequestBody buildBodyParams() {
            GroupAdminRequestBody groupAdminRequestBody = new GroupAdminRequestBody();
            groupAdminRequestBody.waIds(this.waIds);
            return groupAdminRequestBody;
        }

        /**
         * Execute demoteAdmin request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            GroupAdminRequestBody groupAdminRequestBody = buildBodyParams();
            demoteAdminWithHttpInfo(groupId, groupAdminRequestBody);
        }

        /**
         * Execute demoteAdmin request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            GroupAdminRequestBody groupAdminRequestBody = buildBodyParams();
            return demoteAdminWithHttpInfo(groupId, groupAdminRequestBody);
        }

        /**
         * Execute demoteAdmin request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            GroupAdminRequestBody groupAdminRequestBody = buildBodyParams();
            return demoteAdminAsync(groupId, groupAdminRequestBody, _callback);
        }
    }

    /**
     * Demote-Group-Admin
     * 
     * @param groupId  (required)
     * @param groupAdminRequestBody  (required)
     * @return DemoteAdminRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DemoteAdminRequestBuilder demoteAdmin(List<String> waIds, String groupId) throws IllegalArgumentException {
        if (waIds == null) throw new IllegalArgumentException("\"waIds\" is required but got null");
        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        return new DemoteAdminRequestBuilder(waIds, groupId);
    }
    private okhttp3.Call getAllCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAllCall(_callback);

    }


    private ApiResponse<GroupsResponse> getAllWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GroupsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAsync(final ApiCallback<GroupsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GroupsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllRequestBuilder {

        private GetAllRequestBuilder() {
        }

        /**
         * Build call for getAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCall(_callback);
        }


        /**
         * Execute getAll request
         * @return GroupsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public GroupsResponse execute() throws ApiException {
            ApiResponse<GroupsResponse> localVarResp = getAllWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAll request with HTTP info returned
         * @return ApiResponse&lt;GroupsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupsResponse> executeWithHttpInfo() throws ApiException {
            return getAllWithHttpInfo();
        }

        /**
         * Execute getAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupsResponse> _callback) throws ApiException {
            return getAllAsync(_callback);
        }
    }

    /**
     * Get-All-Groups
     * 
     * @return GetAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetAllRequestBuilder getAll() throws IllegalArgumentException {
        return new GetAllRequestBuilder();
    }
    private okhttp3.Call getIconBinaryCall(String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{GroupId}/icon"
            .replace("{" + "GroupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIconBinaryValidateBeforeCall(String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getIconBinary(Async)");
        }

        return getIconBinaryCall(groupId, _callback);

    }


    private ApiResponse<Void> getIconBinaryWithHttpInfo(String groupId) throws ApiException {
        okhttp3.Call localVarCall = getIconBinaryValidateBeforeCall(groupId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getIconBinaryAsync(String groupId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIconBinaryValidateBeforeCall(groupId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetIconBinaryRequestBuilder {
        private final String groupId;

        private GetIconBinaryRequestBuilder(String groupId) {
            this.groupId = groupId;
        }

        /**
         * Build call for getIconBinary
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getIconBinaryCall(groupId, _callback);
        }


        /**
         * Execute getIconBinary request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getIconBinaryWithHttpInfo(groupId);
        }

        /**
         * Execute getIconBinary request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getIconBinaryWithHttpInfo(groupId);
        }

        /**
         * Execute getIconBinary request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getIconBinaryAsync(groupId, _callback);
        }
    }

    /**
     * Get-Group-Icon-Binary
     * 
     * @param groupId  (required)
     * @return GetIconBinaryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetIconBinaryRequestBuilder getIconBinary(String groupId) throws IllegalArgumentException {
        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        return new GetIconBinaryRequestBuilder(groupId);
    }
    private okhttp3.Call getInfoCall(String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{GroupId}"
            .replace("{" + "GroupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInfoValidateBeforeCall(String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getInfo(Async)");
        }

        return getInfoCall(groupId, _callback);

    }


    private ApiResponse<GroupResponse> getInfoWithHttpInfo(String groupId) throws ApiException {
        okhttp3.Call localVarCall = getInfoValidateBeforeCall(groupId, null);
        Type localVarReturnType = new TypeToken<GroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInfoAsync(String groupId, final ApiCallback<GroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInfoValidateBeforeCall(groupId, _callback);
        Type localVarReturnType = new TypeToken<GroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInfoRequestBuilder {
        private final String groupId;

        private GetInfoRequestBuilder(String groupId) {
            this.groupId = groupId;
        }

        /**
         * Build call for getInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInfoCall(groupId, _callback);
        }


        /**
         * Execute getInfo request
         * @return GroupResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public GroupResponse execute() throws ApiException {
            ApiResponse<GroupResponse> localVarResp = getInfoWithHttpInfo(groupId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInfo request with HTTP info returned
         * @return ApiResponse&lt;GroupResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupResponse> executeWithHttpInfo() throws ApiException {
            return getInfoWithHttpInfo(groupId);
        }

        /**
         * Execute getInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupResponse> _callback) throws ApiException {
            return getInfoAsync(groupId, _callback);
        }
    }

    /**
     * Get-Group-Info
     * 
     * @param groupId  (required)
     * @return GetInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetInfoRequestBuilder getInfo(String groupId) throws IllegalArgumentException {
        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        return new GetInfoRequestBuilder(groupId);
    }
    private okhttp3.Call getInviteDetailsCall(String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{GroupId}/invite"
            .replace("{" + "GroupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInviteDetailsValidateBeforeCall(String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getInviteDetails(Async)");
        }

        return getInviteDetailsCall(groupId, _callback);

    }


    private ApiResponse<GroupInviteResponse> getInviteDetailsWithHttpInfo(String groupId) throws ApiException {
        okhttp3.Call localVarCall = getInviteDetailsValidateBeforeCall(groupId, null);
        Type localVarReturnType = new TypeToken<GroupInviteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInviteDetailsAsync(String groupId, final ApiCallback<GroupInviteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInviteDetailsValidateBeforeCall(groupId, _callback);
        Type localVarReturnType = new TypeToken<GroupInviteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInviteDetailsRequestBuilder {
        private final String groupId;

        private GetInviteDetailsRequestBuilder(String groupId) {
            this.groupId = groupId;
        }

        /**
         * Build call for getInviteDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInviteDetailsCall(groupId, _callback);
        }


        /**
         * Execute getInviteDetails request
         * @return GroupInviteResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public GroupInviteResponse execute() throws ApiException {
            ApiResponse<GroupInviteResponse> localVarResp = getInviteDetailsWithHttpInfo(groupId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInviteDetails request with HTTP info returned
         * @return ApiResponse&lt;GroupInviteResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupInviteResponse> executeWithHttpInfo() throws ApiException {
            return getInviteDetailsWithHttpInfo(groupId);
        }

        /**
         * Execute getInviteDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupInviteResponse> _callback) throws ApiException {
            return getInviteDetailsAsync(groupId, _callback);
        }
    }

    /**
     * Get-Group-Invite
     * 
     * @param groupId  (required)
     * @return GetInviteDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetInviteDetailsRequestBuilder getInviteDetails(String groupId) throws IllegalArgumentException {
        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        return new GetInviteDetailsRequestBuilder(groupId);
    }
    private okhttp3.Call leaveGroupCall(String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{GroupId}/leave"
            .replace("{" + "GroupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call leaveGroupValidateBeforeCall(String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling leaveGroup(Async)");
        }

        return leaveGroupCall(groupId, _callback);

    }


    private ApiResponse<Void> leaveGroupWithHttpInfo(String groupId) throws ApiException {
        okhttp3.Call localVarCall = leaveGroupValidateBeforeCall(groupId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call leaveGroupAsync(String groupId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = leaveGroupValidateBeforeCall(groupId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class LeaveGroupRequestBuilder {
        private final String groupId;

        private LeaveGroupRequestBuilder(String groupId) {
            this.groupId = groupId;
        }

        /**
         * Build call for leaveGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return leaveGroupCall(groupId, _callback);
        }


        /**
         * Execute leaveGroup request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            leaveGroupWithHttpInfo(groupId);
        }

        /**
         * Execute leaveGroup request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return leaveGroupWithHttpInfo(groupId);
        }

        /**
         * Execute leaveGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return leaveGroupAsync(groupId, _callback);
        }
    }

    /**
     * Leave-Group
     * 
     * @param groupId  (required)
     * @return LeaveGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public LeaveGroupRequestBuilder leaveGroup(String groupId) throws IllegalArgumentException {
        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        return new LeaveGroupRequestBuilder(groupId);
    }
    private okhttp3.Call promoteToAdminCall(String groupId, GroupAdminRequestBody groupAdminRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupAdminRequestBody;

        // create path and map variables
        String localVarPath = "/groups/{GroupId}/admins"
            .replace("{" + "GroupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call promoteToAdminValidateBeforeCall(String groupId, GroupAdminRequestBody groupAdminRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling promoteToAdmin(Async)");
        }

        // verify the required parameter 'groupAdminRequestBody' is set
        if (groupAdminRequestBody == null) {
            throw new ApiException("Missing the required parameter 'groupAdminRequestBody' when calling promoteToAdmin(Async)");
        }

        return promoteToAdminCall(groupId, groupAdminRequestBody, _callback);

    }


    private ApiResponse<Void> promoteToAdminWithHttpInfo(String groupId, GroupAdminRequestBody groupAdminRequestBody) throws ApiException {
        okhttp3.Call localVarCall = promoteToAdminValidateBeforeCall(groupId, groupAdminRequestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call promoteToAdminAsync(String groupId, GroupAdminRequestBody groupAdminRequestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = promoteToAdminValidateBeforeCall(groupId, groupAdminRequestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class PromoteToAdminRequestBuilder {
        private final List<String> waIds;
        private final String groupId;

        private PromoteToAdminRequestBuilder(List<String> waIds, String groupId) {
            this.waIds = waIds;
            this.groupId = groupId;
        }

        /**
         * Build call for promoteToAdmin
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GroupAdminRequestBody groupAdminRequestBody = buildBodyParams();
            return promoteToAdminCall(groupId, groupAdminRequestBody, _callback);
        }

        private GroupAdminRequestBody buildBodyParams() {
            GroupAdminRequestBody groupAdminRequestBody = new GroupAdminRequestBody();
            groupAdminRequestBody.waIds(this.waIds);
            return groupAdminRequestBody;
        }

        /**
         * Execute promoteToAdmin request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            GroupAdminRequestBody groupAdminRequestBody = buildBodyParams();
            promoteToAdminWithHttpInfo(groupId, groupAdminRequestBody);
        }

        /**
         * Execute promoteToAdmin request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            GroupAdminRequestBody groupAdminRequestBody = buildBodyParams();
            return promoteToAdminWithHttpInfo(groupId, groupAdminRequestBody);
        }

        /**
         * Execute promoteToAdmin request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            GroupAdminRequestBody groupAdminRequestBody = buildBodyParams();
            return promoteToAdminAsync(groupId, groupAdminRequestBody, _callback);
        }
    }

    /**
     * Promote-To-Group-Admin
     * 
     * @param groupId  (required)
     * @param groupAdminRequestBody  (required)
     * @return PromoteToAdminRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PromoteToAdminRequestBuilder promoteToAdmin(List<String> waIds, String groupId) throws IllegalArgumentException {
        if (waIds == null) throw new IllegalArgumentException("\"waIds\" is required but got null");
        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        return new PromoteToAdminRequestBuilder(waIds, groupId);
    }
    private okhttp3.Call removeParticipantCall(String groupId, RemoveGroupParticipantRequestBody removeGroupParticipantRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeGroupParticipantRequestBody;

        // create path and map variables
        String localVarPath = "/groups/{GroupId}/participants"
            .replace("{" + "GroupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeParticipantValidateBeforeCall(String groupId, RemoveGroupParticipantRequestBody removeGroupParticipantRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling removeParticipant(Async)");
        }

        // verify the required parameter 'removeGroupParticipantRequestBody' is set
        if (removeGroupParticipantRequestBody == null) {
            throw new ApiException("Missing the required parameter 'removeGroupParticipantRequestBody' when calling removeParticipant(Async)");
        }

        return removeParticipantCall(groupId, removeGroupParticipantRequestBody, _callback);

    }


    private ApiResponse<Void> removeParticipantWithHttpInfo(String groupId, RemoveGroupParticipantRequestBody removeGroupParticipantRequestBody) throws ApiException {
        okhttp3.Call localVarCall = removeParticipantValidateBeforeCall(groupId, removeGroupParticipantRequestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeParticipantAsync(String groupId, RemoveGroupParticipantRequestBody removeGroupParticipantRequestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeParticipantValidateBeforeCall(groupId, removeGroupParticipantRequestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveParticipantRequestBuilder {
        private final List<String> waIds;
        private final String groupId;

        private RemoveParticipantRequestBuilder(List<String> waIds, String groupId) {
            this.waIds = waIds;
            this.groupId = groupId;
        }

        /**
         * Build call for removeParticipant
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RemoveGroupParticipantRequestBody removeGroupParticipantRequestBody = buildBodyParams();
            return removeParticipantCall(groupId, removeGroupParticipantRequestBody, _callback);
        }

        private RemoveGroupParticipantRequestBody buildBodyParams() {
            RemoveGroupParticipantRequestBody removeGroupParticipantRequestBody = new RemoveGroupParticipantRequestBody();
            removeGroupParticipantRequestBody.waIds(this.waIds);
            return removeGroupParticipantRequestBody;
        }

        /**
         * Execute removeParticipant request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            RemoveGroupParticipantRequestBody removeGroupParticipantRequestBody = buildBodyParams();
            removeParticipantWithHttpInfo(groupId, removeGroupParticipantRequestBody);
        }

        /**
         * Execute removeParticipant request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            RemoveGroupParticipantRequestBody removeGroupParticipantRequestBody = buildBodyParams();
            return removeParticipantWithHttpInfo(groupId, removeGroupParticipantRequestBody);
        }

        /**
         * Execute removeParticipant request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            RemoveGroupParticipantRequestBody removeGroupParticipantRequestBody = buildBodyParams();
            return removeParticipantAsync(groupId, removeGroupParticipantRequestBody, _callback);
        }
    }

    /**
     * Remove-Group-Participant
     * 
     * @param groupId  (required)
     * @param removeGroupParticipantRequestBody  (required)
     * @return RemoveParticipantRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RemoveParticipantRequestBuilder removeParticipant(List<String> waIds, String groupId) throws IllegalArgumentException {
        if (waIds == null) throw new IllegalArgumentException("\"waIds\" is required but got null");
        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        return new RemoveParticipantRequestBuilder(waIds, groupId);
    }
    private okhttp3.Call setGroupIconCall(String groupId, File _file, GroupsSetGroupIconRequest groupsSetGroupIconRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupsSetGroupIconRequest;

        // create path and map variables
        String localVarPath = "/groups/{GroupId}/icon"
            .replace("{" + "GroupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("File", _file);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setGroupIconValidateBeforeCall(String groupId, File _file, GroupsSetGroupIconRequest groupsSetGroupIconRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling setGroupIcon(Async)");
        }

        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling setGroupIcon(Async)");
        }

        return setGroupIconCall(groupId, _file, groupsSetGroupIconRequest, _callback);

    }


    private ApiResponse<Void> setGroupIconWithHttpInfo(String groupId, File _file, GroupsSetGroupIconRequest groupsSetGroupIconRequest) throws ApiException {
        okhttp3.Call localVarCall = setGroupIconValidateBeforeCall(groupId, _file, groupsSetGroupIconRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call setGroupIconAsync(String groupId, File _file, GroupsSetGroupIconRequest groupsSetGroupIconRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setGroupIconValidateBeforeCall(groupId, _file, groupsSetGroupIconRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SetGroupIconRequestBuilder {
        private final String groupId;
        private final File _file;

        private SetGroupIconRequestBuilder(String groupId, File _file) {
            this.groupId = groupId;
            this._file = _file;
        }

        /**
         * Build call for setGroupIcon
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GroupsSetGroupIconRequest groupsSetGroupIconRequest = buildBodyParams();
            return setGroupIconCall(groupId, _file, groupsSetGroupIconRequest, _callback);
        }

        private GroupsSetGroupIconRequest buildBodyParams() {
            GroupsSetGroupIconRequest groupsSetGroupIconRequest = new GroupsSetGroupIconRequest();
            groupsSetGroupIconRequest._file(this._file);
            return groupsSetGroupIconRequest;
        }

        /**
         * Execute setGroupIcon request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            GroupsSetGroupIconRequest groupsSetGroupIconRequest = buildBodyParams();
            setGroupIconWithHttpInfo(groupId, _file, groupsSetGroupIconRequest);
        }

        /**
         * Execute setGroupIcon request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            GroupsSetGroupIconRequest groupsSetGroupIconRequest = buildBodyParams();
            return setGroupIconWithHttpInfo(groupId, _file, groupsSetGroupIconRequest);
        }

        /**
         * Execute setGroupIcon request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            GroupsSetGroupIconRequest groupsSetGroupIconRequest = buildBodyParams();
            return setGroupIconAsync(groupId, _file, groupsSetGroupIconRequest, _callback);
        }
    }

    /**
     * Set-Group-Icon
     * 
     * @param groupId  (required)
     * @param _file  (required)
     * @return SetGroupIconRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SetGroupIconRequestBuilder setGroupIcon(String groupId, File _file) throws IllegalArgumentException {
        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        if (_file == null) throw new IllegalArgumentException("\"_file\" is required but got null");
        return new SetGroupIconRequestBuilder(groupId, _file);
    }
    private okhttp3.Call updateInfoCall(String groupId, UpdateGroupInfoRequestBody updateGroupInfoRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateGroupInfoRequestBody;

        // create path and map variables
        String localVarPath = "/groups/{GroupId}"
            .replace("{" + "GroupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateInfoValidateBeforeCall(String groupId, UpdateGroupInfoRequestBody updateGroupInfoRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling updateInfo(Async)");
        }

        // verify the required parameter 'updateGroupInfoRequestBody' is set
        if (updateGroupInfoRequestBody == null) {
            throw new ApiException("Missing the required parameter 'updateGroupInfoRequestBody' when calling updateInfo(Async)");
        }

        return updateInfoCall(groupId, updateGroupInfoRequestBody, _callback);

    }


    private ApiResponse<Void> updateInfoWithHttpInfo(String groupId, UpdateGroupInfoRequestBody updateGroupInfoRequestBody) throws ApiException {
        okhttp3.Call localVarCall = updateInfoValidateBeforeCall(groupId, updateGroupInfoRequestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateInfoAsync(String groupId, UpdateGroupInfoRequestBody updateGroupInfoRequestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateInfoValidateBeforeCall(groupId, updateGroupInfoRequestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateInfoRequestBuilder {
        private final String subject;
        private final String groupId;

        private UpdateInfoRequestBuilder(String subject, String groupId) {
            this.subject = subject;
            this.groupId = groupId;
        }

        /**
         * Build call for updateInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateGroupInfoRequestBody updateGroupInfoRequestBody = buildBodyParams();
            return updateInfoCall(groupId, updateGroupInfoRequestBody, _callback);
        }

        private UpdateGroupInfoRequestBody buildBodyParams() {
            UpdateGroupInfoRequestBody updateGroupInfoRequestBody = new UpdateGroupInfoRequestBody();
            updateGroupInfoRequestBody.subject(this.subject);
            return updateGroupInfoRequestBody;
        }

        /**
         * Execute updateInfo request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateGroupInfoRequestBody updateGroupInfoRequestBody = buildBodyParams();
            updateInfoWithHttpInfo(groupId, updateGroupInfoRequestBody);
        }

        /**
         * Execute updateInfo request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateGroupInfoRequestBody updateGroupInfoRequestBody = buildBodyParams();
            return updateInfoWithHttpInfo(groupId, updateGroupInfoRequestBody);
        }

        /**
         * Execute updateInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateGroupInfoRequestBody updateGroupInfoRequestBody = buildBodyParams();
            return updateInfoAsync(groupId, updateGroupInfoRequestBody, _callback);
        }
    }

    /**
     * Update-Group-Info
     * 
     * @param groupId  (required)
     * @param updateGroupInfoRequestBody  (required)
     * @return UpdateInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateInfoRequestBuilder updateInfo(String subject, String groupId) throws IllegalArgumentException {
        if (subject == null) throw new IllegalArgumentException("\"subject\" is required but got null");
            

        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        return new UpdateInfoRequestBuilder(subject, groupId);
    }
}
